.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::IPC 3"
.TH Test::Stream::IPC 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::IPC \- Base class for Test::Stream IPC drivers.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Test::Stream::IPC::MyDriver;
\&
\&    use base \*(AqTest::Stream::IPC\*(Aq;
\&
\&    ...
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .IP "@drivers = $class\->drivers" 4
.el .IP "\f(CW@drivers\fR = \f(CW$class\fR\->drivers" 4
.IX Item "@drivers = $class->drivers"
Obtain the list of drivers that have been registered, in the order they were
registered. If no driver has been loaded this will load, register, and return
Test::Stream::IPC::Files.
.ie n .IP "$class\->register_driver($DRIVER)" 4
.el .IP "\f(CW$class\fR\->register_driver($DRIVER)" 4
.IX Item "$class->register_driver($DRIVER)"
This is an alias to \f(CW\*(C`register_driver\*(C'\fR
.ie n .IP "$class\->register_drivers($DRIVER1, $DRIVER2)" 4
.el .IP "\f(CW$class\fR\->register_drivers($DRIVER1, \f(CW$DRIVER2\fR)" 4
.IX Item "$class->register_drivers($DRIVER1, $DRIVER2)"
Use this to register an \s-1IPC\s0 driver. The driver shoudl already be loaded.
.ie n .IP "$class\->enable_polling" 4
.el .IP "\f(CW$class\fR\->enable_polling" 4
.IX Item "$class->enable_polling"
This turns on \s-1IPC\s0 polling. Essentially this adds a global callback on context
initialization. Every time a context is obtained from Test::Stream::Context
the \s-1IPC\s0 driver will have a chance to poll for pending events.
.Sp
This can only be turned on once, and it can not be turned off. The effects are
global.
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.ie n .IP "$self\->abort($msg)" 4
.el .IP "\f(CW$self\fR\->abort($msg)" 4
.IX Item "$self->abort($msg)"
If an \s-1IPC\s0 encounters a fatal error it should use this. This will print the
message to \s-1STDERR\s0 with \f(CW\*(AqIPC Fatal Error: \*(Aq\fR prefixed to it, then it will
forcefully exit 255. \s-1IPC\s0 errors may occur in threads or processes other than
the main one, this method provides the best chance of the harness noticing the
error.
.ie n .IP "$self\->abort_trace($msg)" 4
.el .IP "\f(CW$self\fR\->abort_trace($msg)" 4
.IX Item "$self->abort_trace($msg)"
This is the same as \f(CW\*(C`$ipc\->abort($msg)\*(C'\fR except that it uses
\&\f(CW\*(C`Carp::longmess\*(C'\fR to add a stack trace to the message.
.SH "LOADING DRIVERS"
.IX Header "LOADING DRIVERS"
Test::Stream::IPC has an \f(CW\*(C`import()\*(C'\fR method. All drivers inherit this import
method. This import method registers the driver with the main \s-1IPC\s0 module.
.PP
In most cases you just need to load the desired \s-1IPC\s0 driver to make it work. You
should load this driver as early as possible. A warning will be issued if you
load it too late for it to be effective.
.PP
.Vb 2
\&    use Test::Stream::IPC::MyDriver;
\&    ...
.Ve
.SH "WRITING DRIVERS"
.IX Header "WRITING DRIVERS"
.Vb 3
\&    package Test::Stream::IPC::MyDriver;
\&    use strict;
\&    use warnings;
\&
\&    use base \*(AqTest::Stream::IPC\*(Aq;
\&
\&    sub is_viable {
\&        return 0 if $^O eq \*(Aqwin32\*(Aq; # Will not work on windows.
\&        return 1;
\&    }
\&
\&    sub add_hub {
\&        my $self = shift;
\&        my ($hid) = @_;
\&
\&        ... # Make it possible to contact the hub
\&    }
\&
\&    sub drop_hub {
\&        my $self = shift;
\&        my ($hid) = @_;
\&
\&        ... # Nothing should try to reach the hub anymore.
\&    }
\&
\&    sub send {
\&        my $self = shift;
\&        my ($hid, $e) = @_;
\&
\&        ... # Send the event to the proper hub.
\&    }
\&
\&    sub cull {
\&        my $self = shift;
\&        my ($hid) = @_;
\&
\&        my @events = ...; # Here is where you get the events for the hub
\&
\&        return @events;
\&    }
\&
\&    sub waiting {
\&        my $self = shift;
\&
\&        ... # Notify all listening procs and threads that the main
\&        ... # process/thread is waiting for them to finish.
\&    }
\&
\&    1;
.Ve
.SS "\s-1METHODS SUBCLASSES MUST IMPLEMENT\s0"
.IX Subsection "METHODS SUBCLASSES MUST IMPLEMENT"
.ie n .IP "$ipc\->is_viable" 4
.el .IP "\f(CW$ipc\fR\->is_viable" 4
.IX Item "$ipc->is_viable"
This should return true if the driver works in the current environment. This
should return false if it does not. This is a \s-1CLASS\s0 method.
.ie n .IP "$ipc\->add_hub($hid)" 4
.el .IP "\f(CW$ipc\fR\->add_hub($hid)" 4
.IX Item "$ipc->add_hub($hid)"
This is used to alert the driver that a new hub is expecting events. The driver
should keep track of the process and thread ids, the hub should only be dropped
by the proc+thread that started it.
.Sp
.Vb 3
\&    sub add_hub {
\&        my $self = shift;
\&        my ($hid) = @_;
\&
\&        ... # Make it possible to contact the hub
\&    }
.Ve
.ie n .IP "$ipc\->drop_hub($hid)" 4
.el .IP "\f(CW$ipc\fR\->drop_hub($hid)" 4
.IX Item "$ipc->drop_hub($hid)"
This is used to alert the driver that a hub is no longer accepting events. The
driver should keep track of the process and thread ids, the hub should only be
dropped by the proc+thread that started it (This is the drivers responsibility
to enforce).
.Sp
.Vb 3
\&    sub drop_hub {
\&        my $self = shift;
\&        my ($hid) = @_;
\&
\&        ... # Nothing should try to reach the hub anymore.
\&    }
.Ve
.ie n .IP "$ipc\->send($hid, $event);" 4
.el .IP "\f(CW$ipc\fR\->send($hid, \f(CW$event\fR);" 4
.IX Item "$ipc->send($hid, $event);"
Used to send events from the current process/thread to the specified hub in its
process+thread.
.Sp
.Vb 3
\&    sub send {
\&        my $self = shift;
\&        my ($hid, $e) = @_;
\&
\&        ... # Send the event to the proper hub.
\&    }
.Ve
.ie n .IP "@events = $ipc\->cull($hid)" 4
.el .IP "\f(CW@events\fR = \f(CW$ipc\fR\->cull($hid)" 4
.IX Item "@events = $ipc->cull($hid)"
Used to collect events that have been sent to the specified hub.
.Sp
.Vb 3
\&    sub cull {
\&        my $self = shift;
\&        my ($hid) = @_;
\&
\&        my @events = ...; # Here is where you get the events for the hub
\&
\&        return @events;
\&    }
.Ve
.ie n .IP "$ipc\->\fIwaiting()\fR" 4
.el .IP "\f(CW$ipc\fR\->\fIwaiting()\fR" 4
.IX Item "$ipc->waiting()"
This is called in the parent process when it is complete and waiting for all
child processes and threads to complete.
.Sp
.Vb 2
\&    sub waiting {
\&        my $self = shift;
\&
\&        ... # Notify all listening procs and threads that the main
\&        ... # process/thread is waiting for them to finish.
\&    }
.Ve
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 144:" 4
.IX Item "Around line 144:"
You forgot a '=back' before '=head1'
.IP "Around line 146:" 4
.IX Item "Around line 146:"
\&'=item' outside of any '=over'
