.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Workflow::Unit 3"
.TH Test::Stream::Workflow::Unit 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Workflow::Unit \- Representation of a workflow unit.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package is a single unit of work to be done in a workflow. The unit may
contain a codeblock, or many child units.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$bool = $unit\->contains($name)" 4
.el .IP "\f(CW$bool\fR = \f(CW$unit\fR\->contains($name)" 4
.IX Item "$bool = $unit->contains($name)"
.PD 0
.ie n .IP "$bool = $unit\->contains($line)" 4
.el .IP "\f(CW$bool\fR = \f(CW$unit\fR\->contains($line)" 4
.IX Item "$bool = $unit->contains($line)"
.ie n .IP "$bool = $unit\->contains(""$file $line)" 4
.el .IP "\f(CW$bool\fR = \f(CW$unit\fR\->contains(""$file \f(CW$line\fR)" 4
.IX Item "$bool = $unit->contains(""$file $line)"
.PD
Check if the unit contains (or is) a unit with the given specification. The
specification may be a line number, a filename + line number, or a unit name.
This will return true if either the unit, or one of the child units, matches.
.ie n .IP "$unit\->add_modify($other_unit)" 4
.el .IP "\f(CW$unit\fR\->add_modify($other_unit)" 4
.IX Item "$unit->add_modify($other_unit)"
.PD 0
.ie n .IP "$unit\->add_buildup($other_unit)" 4
.el .IP "\f(CW$unit\fR\->add_buildup($other_unit)" 4
.IX Item "$unit->add_buildup($other_unit)"
.ie n .IP "$unit\->add_teardown($other_unit)" 4
.el .IP "\f(CW$unit\fR\->add_teardown($other_unit)" 4
.IX Item "$unit->add_teardown($other_unit)"
.PD
These add \f(CW$other_unit\fR as a child unit. The child is added to the group
specified in the method name.
.ie n .IP "$unit\->add_primary($other_unit)" 4
.el .IP "\f(CW$unit\fR\->add_primary($other_unit)" 4
.IX Item "$unit->add_primary($other_unit)"
Add a primary unit child. \fBNote:\fR The primary unit is either an arrayref of
other units, or a single coderef. In cases where the primary is a coderef, this
will fail badly.
.ie n .IP "$unit\->add_post(sub { ... })" 4
.el .IP "\f(CW$unit\fR\->add_post(sub { ... })" 4
.IX Item "$unit->add_post(sub { ... })"
Add a post-build callback.
.ie n .IP "$unit\->\fIdo_post()\fR" 4
.el .IP "\f(CW$unit\fR\->\fIdo_post()\fR" 4
.IX Item "$unit->do_post()"
Run (and remove) the post-build callbacks.
.ie n .IP "$dbg = $unit\->debug" 4
.el .IP "\f(CW$dbg\fR = \f(CW$unit\fR\->debug" 4
.IX Item "$dbg = $unit->debug"
Generate an Test::Stream::Debug object for this unit.
.ie n .IP "$ctx = $unit\->context" 4
.el .IP "\f(CW$ctx\fR = \f(CW$unit\fR\->context" 4
.IX Item "$ctx = $unit->context"
Generate a context representing the scope of the unit. \fBNote:\fR this context is
non-canonical.
.ie n .IP "$name = $unit\->name" 4
.el .IP "\f(CW$name\fR = \f(CW$unit\fR\->name" 4
.IX Item "$name = $unit->name"
Get the unit name.
.ie n .IP "$hr = $unit\->meta" 4
.el .IP "\f(CW$hr\fR = \f(CW$unit\fR\->meta" 4
.IX Item "$hr = $unit->meta"
Get the meta hashref, this contains things like 'todo' and 'skip'.
.ie n .IP "$type = $unit\->type" 4
.el .IP "\f(CW$type\fR = \f(CW$unit\fR\->type" 4
.IX Item "$type = $unit->type"
Get the unit type.
.ie n .IP "$bool = $unit\->wrap" 4
.el .IP "\f(CW$bool\fR = \f(CW$unit\fR\->wrap" 4
.IX Item "$bool = $unit->wrap"
True if the codeblock for this unit is a wrap (around_all, around_each, etc).
.ie n .IP "$hr = $unit\->stash" 4
.el .IP "\f(CW$hr\fR = \f(CW$unit\fR\->stash" 4
.IX Item "$hr = $unit->stash"
General purpose stash for use in plugins and extensions.
.ie n .IP "$pkg = $unit\->package" 4
.el .IP "\f(CW$pkg\fR = \f(CW$unit\fR\->package" 4
.IX Item "$pkg = $unit->package"
Package for the unit.
.ie n .IP "$file = $unit\->file" 4
.el .IP "\f(CW$file\fR = \f(CW$unit\fR\->file" 4
.IX Item "$file = $unit->file"
Filename for the unit
.ie n .IP "$start = $unit\->start_line" 4
.el .IP "\f(CW$start\fR = \f(CW$unit\fR\->start_line" 4
.IX Item "$start = $unit->start_line"
Starting line for the unit.
.ie n .IP "$end = $unit\->end_line" 4
.el .IP "\f(CW$end\fR = \f(CW$unit\fR\->end_line" 4
.IX Item "$end = $unit->end_line"
Ending line number for the unit. \fBNote:\fR This can be set to an integer, or to
the string '\s-1EOF\s0'.
.ie n .IP "$unit\->adjust_lines" 4
.el .IP "\f(CW$unit\fR\->adjust_lines" 4
.IX Item "$unit->adjust_lines"
This will check all child unit bounds, if they fall outside the parents bounds
then the parent will be adjusted.
.ie n .IP "$ar = $unit\->post" 4
.el .IP "\f(CW$ar\fR = \f(CW$unit\fR\->post" 4
.IX Item "$ar = $unit->post"
.PD 0
.ie n .IP "$ar = $unit\->modify" 4
.el .IP "\f(CW$ar\fR = \f(CW$unit\fR\->modify" 4
.IX Item "$ar = $unit->modify"
.ie n .IP "$ar = $unit\->buildup" 4
.el .IP "\f(CW$ar\fR = \f(CW$unit\fR\->buildup" 4
.IX Item "$ar = $unit->buildup"
.ie n .IP "$ar = $unit\->teardown" 4
.el .IP "\f(CW$ar\fR = \f(CW$unit\fR\->teardown" 4
.IX Item "$ar = $unit->teardown"
.PD
Access to the arrayrefs for the specific child types.
.ie n .IP "$code_or_ar = $unit\->primary" 4
.el .IP "\f(CW$code_or_ar\fR = \f(CW$unit\fR\->primary" 4
.IX Item "$code_or_ar = $unit->primary"
Get the primary, which may be an arrayref of other units, or a single coderef.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
