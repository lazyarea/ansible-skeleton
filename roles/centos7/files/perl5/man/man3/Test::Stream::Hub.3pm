.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Hub 3"
.TH Test::Stream::Hub 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Hub \- The conduit through which all events flow.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Stream::Hub;
\&
\&    my $hub = Test::Stream::Hub\->new();
\&    $hub\->send(...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The hub is the place where all events get processed and handed off to the
formatter. The hub also tracks test state, and provides everal hooks into the
event pipeline.
.SH "COMMON TASKS"
.IX Header "COMMON TASKS"
.SS "\s-1SENDING EVENTS\s0"
.IX Subsection "SENDING EVENTS"
.Vb 1
\&    $hub\->send($event)
.Ve
.PP
The \f(CW\*(C`send()\*(C'\fR method is used to issue an event to the hub. This method will
handle thread/fork sync, mungers, listeners, \s-1TAP\s0 output, etc.
.SS "\s-1ALTERING EVENTS\s0"
.IX Subsection "ALTERING EVENTS"
.Vb 2
\&    $hub\->munge(sub {
\&        my ($hub, $event) = @_;
\&
\&        ... Modify the event object ...
\&
\&        # return is ignored.
\&    });
.Ve
.PP
By default mungers are not inherited by child hubs, that means if you start a
subtest, the subtest will not inherit the munger. You can change this behavior
with the \f(CW\*(C`inherit\*(C'\fR parameter:
.PP
.Vb 1
\&    $hub\->munge(sub { ... }, inherit => 1);
.Ve
.PP
\fI\s-1DESTROYING OR REPLACING AN EVENT\s0\fR
.IX Subsection "DESTROYING OR REPLACING AN EVENT"
.PP
\&\f(CW@_\fR elements are aliased to the arguments passed into the munger from the
caller. Because of this you can destroy the event so that nothing ever sees it.
This will be supported so long as perl supports this behavior. There is a check
in \f(CW\*(C`send()\*(C'\fR to return if a munger destroys the event.
.PP
.Vb 3
\&    $hub\->munge(sub {
\&        my ($hub, $event) = @_;
\&        return unless ...;
\&
\&        $_[1] = undef;
\&    });
.Ve
.SS "\s-1LISTENING FOR EVENTS\s0"
.IX Subsection "LISTENING FOR EVENTS"
.Vb 2
\&    $hub\->listen(sub {
\&        my ($hub, $event, $number) = @_;
\&
\&        ... do whatever you want with the event ...
\&
\&        # return is ignored
\&    });
.Ve
.PP
By default listeners are not inherited by child hubs, that means if you start a
subtest, the subtest will not inherit the listener. You can change this behavior
with the \f(CW\*(C`inherit\*(C'\fR parameter:
.PP
.Vb 1
\&    $hub\->listen(sub { ... }, inherit => 1);
.Ve
.SS "POST-TEST \s-1BEHAVIORS\s0"
.IX Subsection "POST-TEST BEHAVIORS"
.Vb 2
\&    $hub\->follow_up(sub {
\&        my ($dbg, $hub) = @_;
\&
\&        ... do whatever you need to ...
\&
\&        # Return is ignored
\&    });
.Ve
.PP
follow_up subs are called only once, ether when done_testing is called, or in
an \s-1END\s0 block.
.SS "\s-1SETTING THE FORMATTER\s0"
.IX Subsection "SETTING THE FORMATTER"
By default an instance of Test::Stream::Formatter::TAP is created and used.
.PP
.Vb 1
\&    my $old = $hub\->format(My::Formatter\->new);
.Ve
.PP
Setting the formatter will \s-1REPLACE\s0 any existing formatter. You may set the
formatter to undef to prevent output. The old formatter will be returned if one
was already set. Only 1 formatter is allowed at a time.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$hub\->send($event)" 4
.el .IP "\f(CW$hub\fR\->send($event)" 4
.IX Item "$hub->send($event)"
This is where all events enter the hub for processing.
.ie n .IP "$hub\->process($event)" 4
.el .IP "\f(CW$hub\fR\->process($event)" 4
.IX Item "$hub->process($event)"
This is called by send after it does any \s-1IPC\s0 handling. You can use this to
bypass the \s-1IPC\s0 process, but in general you should avoid using this.
.ie n .IP "$val = $hub\->meta($key)" 4
.el .IP "\f(CW$val\fR = \f(CW$hub\fR\->meta($key)" 4
.IX Item "$val = $hub->meta($key)"
.PD 0
.ie n .IP "$val = $hub\->meta($key, $default)" 4
.el .IP "\f(CW$val\fR = \f(CW$hub\fR\->meta($key, \f(CW$default\fR)" 4
.IX Item "$val = $hub->meta($key, $default)"
.PD
This method is made available to allow third party plugins to associate
meta-data with a hub. It is recommended that all third party plugins use their
module namespace as their meta-data key.
.Sp
This method always returns the value for the key. If there is no value it will
be initialized to \f(CW$default\fR, in which case \f(CW$default\fR is also returned.
.Sp
Recommended usage:
.Sp
.Vb 5
\&    my $meta = $hub\->meta(_\|_PACKAGE_\|_, {});
\&    unless ($meta\->{foo}) {
\&        $meta\->{foo} = 1;
\&        $meta\->{bar} = 2;
\&    }
.Ve
.ie n .IP "$val = $hub\->delete_meta($key)" 4
.el .IP "\f(CW$val\fR = \f(CW$hub\fR\->delete_meta($key)" 4
.IX Item "$val = $hub->delete_meta($key)"
This will delete all data in the specified metadata key.
.ie n .IP "$val = $hub\->get_meta($key)" 4
.el .IP "\f(CW$val\fR = \f(CW$hub\fR\->get_meta($key)" 4
.IX Item "$val = $hub->get_meta($key)"
This method will retrieve the value of any meta-data key specified.
.ie n .IP "$string = $hub\->\fIget_todo()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$hub\fR\->\fIget_todo()\fR" 4
.IX Item "$string = $hub->get_todo()"
Get the current \s-1TODO\s0 reason. This will be undef if there is no active todo.
Please note that 0 and \f(CW\*(Aq\*(Aq\fR (empty string) count as active todo.
.ie n .IP "$ref = $hub\->set_todo($reason)" 4
.el .IP "\f(CW$ref\fR = \f(CW$hub\fR\->set_todo($reason)" 4
.IX Item "$ref = $hub->set_todo($reason)"
This will set the todo message. The todo will remain in effect until you let go
of the reference returned by this method.
.Sp
.Vb 2
\&    {
\&        my $todo = $hub\->set_todo("Broken");
\&
\&        # These ok events will be TODO
\&        ok($foo\->doit, "do it!");
\&        ok($foo\->doit, "do it again!");
\&
\&        # The todo setting goes away at the end of this scope.
\&    }
\&
\&    # This result will not be TODO.
\&    ok(1, "pass");
.Ve
.Sp
You can also do it without the indentation:
.Sp
.Vb 1
\&    my $todo = $hub\->set_todo("Broken");
\&
\&    # These ok events will be TODO
\&    ok($foo\->doit, "do it!");
\&    ok($foo\->doit, "do it again!");
\&
\&    # Unset the todo
\&    $todo = undef;
\&
\&    # This result will not be TODO.
\&    ok(1, "pass");
.Ve
.Sp
This method can be called while \s-1TODO\s0 is already in effect and it will work in a
sane way:
.Sp
.Vb 2
\&    {
\&        my $first_todo = $hub\->set_todo("Will fix soon");
\&
\&        ok(0, "Not fixed"); # TODO: Will fix soon
\&
\&        {
\&            my $second_todo = $hub\->set_todo("Will fix eventually");
\&            ok(0, "Not fixed"); # TODO: Will fix eventually
\&        }
\&
\&        ok(0, "Not fixed"); # TODO: Will fix soon
\&    }
.Ve
.Sp
This also works if you free todo's out of order. The most recently set todo
that is still active will always be used as the todo.
.ie n .IP "$old = $hub\->format($formatter)" 4
.el .IP "\f(CW$old\fR = \f(CW$hub\fR\->format($formatter)" 4
.IX Item "$old = $hub->format($formatter)"
Replace the existing formatter instance with a new one. Formatters must be
objects that implement a \f(CW\*(C`$formatter\->write($event)\*(C'\fR method.
.ie n .IP "$sub = $hub\->munge(sub { ... })" 4
.el .IP "\f(CW$sub\fR = \f(CW$hub\fR\->munge(sub { ... })" 4
.IX Item "$sub = $hub->munge(sub { ... })"
.PD 0
.ie n .IP "$sub = $hub\->munge(sub { ... }, inherit => 1)" 4
.el .IP "\f(CW$sub\fR = \f(CW$hub\fR\->munge(sub { ... }, inherit => 1)" 4
.IX Item "$sub = $hub->munge(sub { ... }, inherit => 1)"
.PD
This adds your codeblock as a callback. Every event that hits this hub will be
given to your munger \s-1BEFORE\s0 it is sent to the formatter. You can make any
modifications you want to the event object.
.Sp
.Vb 2
\&    $hub\->munge(sub {
\&        my ($hub, $event) = @_;
\&
\&        ... Modify the event object ...
\&
\&        # return is ignored.
\&    });
.Ve
.Sp
You can also completely remove the event from the stream:
.Sp
.Vb 3
\&    $hub\->munge(sub {
\&        my ($hub, $event) = @_;
\&        return unless ...;
\&
\&        $_[1] = undef;
\&    });
.Ve
.Sp
Normally mungers are not inherited by child hubs such as subtests. You can add
the \f(CW\*(C`inherit => 1\*(C'\fR parameter to allow a munger to be inherited.
.ie n .IP "$hub\->unmunge($sub)" 4
.el .IP "\f(CW$hub\fR\->unmunge($sub)" 4
.IX Item "$hub->unmunge($sub)"
You can use this to remove a munge callback. You must pass in the coderef
returned by the \f(CW\*(C`munge()\*(C'\fR method.
.ie n .IP "$sub = $hub\->listen(sub { ... })" 4
.el .IP "\f(CW$sub\fR = \f(CW$hub\fR\->listen(sub { ... })" 4
.IX Item "$sub = $hub->listen(sub { ... })"
You can use this to record all events \s-1AFTER\s0 they have been sent to the
formatter. No changes made here will be meaningful, except possibly to other
listeners.
.Sp
.Vb 2
\&    $hub\->listen(sub {
\&        my ($hub, $event, $number) = @_;
\&
\&        ... do whatever you want with the event ...
\&
\&        # return is ignored
\&    });
.Ve
.Sp
Normally listeners are not inherited by child hubs such as subtests. You can
add the \f(CW\*(C`inherit => 1\*(C'\fR parameter to allow a listener to be inherited.
.ie n .IP "$hub\->unlisten($sub)" 4
.el .IP "\f(CW$hub\fR\->unlisten($sub)" 4
.IX Item "$hub->unlisten($sub)"
You can use this to remove a listen callback. You must pass in the coderef
returned by the \f(CW\*(C`listen()\*(C'\fR method.
.ie n .IP "$hub\->follow_op(sub { ... })" 4
.el .IP "\f(CW$hub\fR\->follow_op(sub { ... })" 4
.IX Item "$hub->follow_op(sub { ... })"
Use this to add behaviors that are called just before the
Test::Stream::State for the hub is finalized. The only argument to your
codeblock will be a Test::Stream::DebugInfo instance.
.Sp
.Vb 2
\&    $hub\->follow_up(sub {
\&        my ($dbg, $hub) = @_;
\&
\&        ... do whatever you need to ...
\&
\&        # Return is ignored
\&    });
.Ve
.Sp
follow_up subs are called only once, ether when done_testing is called, or in
an \s-1END\s0 block.
.ie n .IP "$sub = $hub\->add_context_init(sub { ... });" 4
.el .IP "\f(CW$sub\fR = \f(CW$hub\fR\->add_context_init(sub { ... });" 4
.IX Item "$sub = $hub->add_context_init(sub { ... });"
This allows you to add callbacks that will trigger every time a new context is
created for the hub. The only argument to the sub will be the
Test::Stream::Context instance that was created.
.Sp
\&\fBNote\fR Using this hook could have a huge performance impact.
.Sp
The coderef you provide is returned and can be used to remove the hook later.
.ie n .IP "$hub\->remove_context_init($sub);" 4
.el .IP "\f(CW$hub\fR\->remove_context_init($sub);" 4
.IX Item "$hub->remove_context_init($sub);"
This can be used to remove a context init hook.
.ie n .IP "$sub = $hub\->add_context_release(sub { ... });" 4
.el .IP "\f(CW$sub\fR = \f(CW$hub\fR\->add_context_release(sub { ... });" 4
.IX Item "$sub = $hub->add_context_release(sub { ... });"
This allows you to add callbacks that will trigger every time a context for
this hub is released. The only argument to the sub will be the
Test::Stream::Context instance that was released. These will run in reverse
order.
.Sp
\&\fBNote\fR Using this hook could have a huge performance impact.
.Sp
The coderef you provide is returned and can be used to remove the hook later.
.ie n .IP "$hub\->remove_context_release($sub);" 4
.el .IP "\f(CW$hub\fR\->remove_context_release($sub);" 4
.IX Item "$hub->remove_context_release($sub);"
This can be used to remove a context release hook.
.ie n .IP "$hub\->\fIcull()\fR" 4
.el .IP "\f(CW$hub\fR\->\fIcull()\fR" 4
.IX Item "$hub->cull()"
Cull any \s-1IPC\s0 events (and process them).
.ie n .IP "$pid = $hub\->\fIpid()\fR" 4
.el .IP "\f(CW$pid\fR = \f(CW$hub\fR\->\fIpid()\fR" 4
.IX Item "$pid = $hub->pid()"
Get the process id under which the hub was created.
.ie n .IP "$tid = $hub\->\fItid()\fR" 4
.el .IP "\f(CW$tid\fR = \f(CW$hub\fR\->\fItid()\fR" 4
.IX Item "$tid = $hub->tid()"
Get the thread id under which the hub was created.
.ie n .IP "$hud = $hub\->\fIhid()\fR" 4
.el .IP "\f(CW$hud\fR = \f(CW$hub\fR\->\fIhid()\fR" 4
.IX Item "$hud = $hub->hid()"
Get the identifier string of the hub.
.ie n .IP "$ipc = $hub\->\fIipc()\fR" 4
.el .IP "\f(CW$ipc\fR = \f(CW$hub\fR\->\fIipc()\fR" 4
.IX Item "$ipc = $hub->ipc()"
Get the \s-1IPC\s0 object used by the hub.
.ie n .IP "$hub\->set_no_ending($bool)" 4
.el .IP "\f(CW$hub\fR\->set_no_ending($bool)" 4
.IX Item "$hub->set_no_ending($bool)"
.PD 0
.ie n .IP "$bool = $hub\->no_ending" 4
.el .IP "\f(CW$bool\fR = \f(CW$hub\fR\->no_ending" 4
.IX Item "$bool = $hub->no_ending"
.PD
This can be used to disable auto-ending behavior for a hub. The auto-ending
behavior is triggered by an end block and is used to cull \s-1IPC\s0 events, and
output the final plan if the plan was 'no_plan'.
.ie n .IP "$bool = $hub\->parent_todo" 4
.el .IP "\f(CW$bool\fR = \f(CW$hub\fR\->parent_todo" 4
.IX Item "$bool = $hub->parent_todo"
This will be true if this hub is a child hub who's parent had todo set.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
