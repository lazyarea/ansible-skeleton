.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Exporter 3"
.TH Test::Stream::Exporter 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Exporter \- Declarative exporter for Test::Stream and friends.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Stream::Exporter is an internal implementation of some key features from
Exporter::Declare. This is a much more powerful exporting tool than
Exporter. This package is used to easily manage complicated export logic
across Test::Stream and friends.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Stream::Exporter;
\&
\&    # Export some named subs from the package
\&    default_exports qw/foo bar baz/;
\&    exports qw/fluxx buxx suxx/;
\&
\&    # Export some anonymous subs under specific names.
\&    export         some_tool    => sub { ... };
\&    default_export another_tool => sub { ... };
\&
\&    # Call this when you are done providing exports in order to cleanup your
\&    # namespace.
\&    no Test::Stream::Exporter;
\&
\&    ...;
.Ve
.SH "CONTROLLING IMPORTS"
.IX Header "CONTROLLING IMPORTS"
.SS "\s-1IMPORTING SUBS WITH ALTERNATE NAMES\s0"
.IX Subsection "IMPORTING SUBS WITH ALTERNATE NAMES"
\&\fBNote:\fR If you import Test::Stream::Exporter functions under alternative
names, \f(CW\*(C`no Test::Stream::Exporter;\*(C'\fR will not find and remove them like it
normally would.
.PP
The rename syntax is borrowed from Exporter::Declare, which borrowed it from
Sub::Exporter.
.PP
.Vb 1
\&    use Some::Exporter an_export => {\-as => \*(Aqnew_name\*(Aq}, other_export => {\-as => \*(Aqother_name\*(Aq};
.Ve
.PP
You can also prefix and/or postfix to the names:
.PP
.Vb 1
\&    use Some::Exporter an_export => {\-preifx => \*(Aqmy_\*(Aq, postfix \*(Aq_tool\*(Aq};
\&
\&    # Now use it:
\&    my_an_export_tool(...);
.Ve
.SS "\s-1IMPORTING ALL SUBS\s0"
.IX Subsection "IMPORTING ALL SUBS"
You can use \f(CW\*(C`\-all\*(C'\fR to import \s-1ALL\s0 subs exported by a module.
.PP
.Vb 1
\&    use Some::Exporter \*(Aq\-all\*(Aq;
.Ve
.PP
This can be combined with aliasing:
.PP
.Vb 1
\&    use Some::Exporter \*(Aq\-all\*(Aq, foo => { \-as => \*(Aqmy_foo\*(Aq };
.Ve
.PP
In this example \f(CW\*(C`foo\*(C'\fR will be imported as 'my_foo', all other subs will be
imported with their original names. Order is not important here.
.SS "\s-1IMPORTING DEFAULTS PLUS\s0"
.IX Subsection "IMPORTING DEFAULTS PLUS"
You can use \f(CW\*(C`\-default\*(C'\fR to import all default subs, then list others you want
to import as well.
.PP
.Vb 1
\&    use Some::Exporter \*(Aq\-default\*(Aq, qw/and_this and_that/;
.Ve
.PP
If you want to import all the defaults \s-1AND\s0 rename one or more:
.PP
.Vb 1
\&    use Some::Exporter \*(Aq\-default\*(Aq, foo => { \-as => \*(Aqmy_foo\*(Aq };
.Ve
.PP
In this example \f(CW\*(C`foo()\*(C'\fR will be imported as \f(CW\*(C`my_foo()\*(C'\fR. All other defaults
will also be imported, but with their original names. Order is not important
here.
.SH "CUSTOMIZING AN IMPORT METHOD"
.IX Header "CUSTOMIZING AN IMPORT METHOD"
Sometimes you need to make a custom import method, but you still want to use
the exporter tool to manage exports. here is how you do it:
.PP
.Vb 3
\&    use Test::Stream::Exporter qw/export exports export_from/;
\&    export foo => sub { \*(Aqfoo\*(Aq };
\&    export qw/bar baz/;
\&
\&    sub import {
\&        my $class = shift;
\&        my @exports = @_;
\&
\&        # Do whatever you need to
\&        ...
\&
\&        # Now go ahead and do the exporting with your list
\&        my $caller = caller;
\&        export_from($class, $caller, \e@exports);
\&    }
\&
\&    # This will cleanup the namespace, including \*(Aqexport_from\*(Aq, do you need to
\&    # do it AFTER your import method.
\&    no Test::Stream::Exporter;
\&
\&    sub bar { \*(Aqbar\*(Aq }
\&    sub baz { \*(Aqbaz\*(Aq }
\&
\&    1;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "\s-1DEFAULT\s0"
.IX Subsection "DEFAULT"
\fI\s-1METHODS\s0\fR
.IX Subsection "METHODS"
.ie n .IP "$class\->import(@list)" 4
.el .IP "\f(CW$class\fR\->import(@list)" 4
.IX Item "$class->import(@list)"
Your class needs this to function as an exporter.
.PP
\fI\s-1FUNCTIONS\s0\fR
.IX Subsection "FUNCTIONS"
.PP
\&\fBNote:\fR All of thease are removed by default when you run
\&\f(CW\*(C`no Test::Stream::Exporter;\*(C'\fR
.IP "export \s-1NAME\s0 => sub { ... }" 4
.IX Item "export NAME => sub { ... }"
.PD 0
.IP "default_export \s-1NAME\s0 => sub { ... }" 4
.IX Item "default_export NAME => sub { ... }"
.PD
These are used to define exports that may not actually be subs in the current
package.
.IP "exports qw/foo bar baz/" 4
.IX Item "exports qw/foo bar baz/"
.PD 0
.IP "default_exports qw/foo bar baz/" 4
.IX Item "default_exports qw/foo bar baz/"
.PD
These let you export package subs en mass.
.SS "\s-1OTHER AVAILABLE EXPORTS\s0"
.IX Subsection "OTHER AVAILABLE EXPORTS"
\fI\s-1METHODS\s0\fR
.IX Subsection "METHODS"
.ie n .IP "$class\->export_to($dest)" 4
.el .IP "\f(CW$class\fR\->export_to($dest)" 4
.IX Item "$class->export_to($dest)"
.PD 0
.ie n .IP "$class\->export_to($dest, \e@symbols)" 4
.el .IP "\f(CW$class\fR\->export_to($dest, \e@symbols)" 4
.IX Item "$class->export_to($dest, @symbols)"
.PD
Export from the exporter class into the \f(CW$dest\fR package. The seconond argument
is optional, if it is omitted the default export list will be used. The second
argument must be an arrayref with export names.
.PP
\fI\s-1FUNCTIONS\s0\fR
.IX Subsection "FUNCTIONS"
.PP
\&\fBNote:\fR All of thease are removed by default when you run
\&\f(CW\*(C`no Test::Stream::Exporter;\*(C'\fR
.ie n .IP "export_from($from, $to)" 4
.el .IP "export_from($from, \f(CW$to\fR)" 4
.IX Item "export_from($from, $to)"
.PD 0
.ie n .IP "export_from($from, $to, \e@symbols)" 4
.el .IP "export_from($from, \f(CW$to\fR, \e@symbols)" 4
.IX Item "export_from($from, $to, @symbols)"
.PD
This will export all the specified symbols from the \f(CW$from\fR package to the
\&\f(CW$to\fR package.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.IP "Kent Fredric <kentnl@cpan.org>" 4
.IX Item "Kent Fredric <kentnl@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
