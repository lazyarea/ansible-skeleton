.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Sync 3"
.TH Test::Stream::Sync 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Sync \- Primary Synchronization point, this is where global stuff
lives.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There is a need to synchronize some details for all tests that run. This
package stores these global objects. As little as possible is kept here, when
possible things should not be global.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Stream::Sync; # No Exports
\&
\&    my $init  = Test::Stream::Sync\->init_done;
\&    my $stack = Test::Stream::Sync\->stack;
\&    my $ipc   = Test::Stream::Sync\->ipc;
\&
\&    Test::Stream::Sync\->set_formatter($FORMATTER)
\&    my $formatter = Test::Stream::Sync\->formatter;
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
This class stores global instances of things. This package is \s-1NOT\s0 an object,
everything that uses it will get the same stuff.
.ie n .IP "$bool = Test::Stream::Sync\->init_done" 4
.el .IP "\f(CW$bool\fR = Test::Stream::Sync\->init_done" 4
.IX Item "$bool = Test::Stream::Sync->init_done"
This will return true if the stack and ipc instances have already been
initialized. It will return false if they have not.
.ie n .IP "$stack = Test::Stream::Sync\->stack" 4
.el .IP "\f(CW$stack\fR = Test::Stream::Sync\->stack" 4
.IX Item "$stack = Test::Stream::Sync->stack"
This will return the global Test::Stream::Stack instance. If this has not
yet been initialized it will be initialized now.
.ie n .IP "$ipc = Test::Stream::Sync\->ipc" 4
.el .IP "\f(CW$ipc\fR = Test::Stream::Sync\->ipc" 4
.IX Item "$ipc = Test::Stream::Sync->ipc"
This will return the global Test::Stream::IPC instance. If this has not yet
been initialized it will be initialized now.
.ie n .IP "$formatter = Test::Stream::Sync\->formatter" 4
.el .IP "\f(CW$formatter\fR = Test::Stream::Sync\->formatter" 4
.IX Item "$formatter = Test::Stream::Sync->formatter"
This will return the global formatter class. This is not an instance. By
default the formatter is set to Test::Stream::Formatter::TAP.
.Sp
You can override this default using the \f(CW\*(C`TS_FORMATTER\*(C'\fR environment variable.
.Sp
Normally 'Test::Stream::Formatter::' is prefixed to the value in the
environment variable:
.Sp
.Vb 2
\&    $ TS_FORMATTER=\*(AqTAP\*(Aq perl test.t     # Use the Test::Stream::Formatter::TAP formatter
\&    $ TS_FORMATTER=\*(AqFoo\*(Aq perl test.t     # Use the Test::Stream::Formatter::Foo formatter
.Ve
.Sp
If you want to specify a full module name you use the '+' prefix:
.Sp
.Vb 1
\&    $ TS_FORMATTER=\*(Aq+Foo::Bar\*(Aq perl test.t     # Use the Foo::Bar formatter
.Ve
.IP "Test::Stream::Sync\->set_formatter($class)" 4
.IX Item "Test::Stream::Sync->set_formatter($class)"
Set the global formatter class. This can only be set once. \fBNote:\fR This will
override anything specified in the '\s-1TS_FORMATTER\s0' environment variable.
.ie n .IP "$bool = Test::Stream::Sync\->no_wait" 4
.el .IP "\f(CW$bool\fR = Test::Stream::Sync\->no_wait" 4
.IX Item "$bool = Test::Stream::Sync->no_wait"
.PD 0
.IP "Test::Stream::Sync\->no_wait($bool)" 4
.IX Item "Test::Stream::Sync->no_wait($bool)"
.PD
This can be used to get/set the no_wait status. Waiting is turned on by
default. Waiting will cause the parent process/thread to wait until all child
processes and threads are finished before exiting. You will almost never want
to turn this off.
.IP "Test::Stream::Sync\->add_hook(sub { ... })" 4
.IX Item "Test::Stream::Sync->add_hook(sub { ... })"
This can be used to add a hook that is called after all testing is done. This
is too late to add additional results, the main use of this hook is to set the
exit code.
.Sp
.Vb 6
\&    Test::Stream::Sync\->add_hook(
\&        sub {
\&            my ($context, $exit, \e$new_exit) = @_;
\&            ...
\&        }
\&    );
.Ve
.Sp
The \f(CW$context\fR passed in will be an instance of Test::Stream::Context. The
\&\f(CW$exit\fR argument will be the original exit code before anything modified it.
\&\f(CW$$new_exit\fR is a reference to the new exit code. You may modify this to
change the exit code. Please note that \f(CW$$new_exit\fR may already be different
from \f(CW$exit\fR
.IP "Test::Stream::Sync\->post_load(sub { ... })" 4
.IX Item "Test::Stream::Sync->post_load(sub { ... })"
Add a callback that will be called when Test::Stream is finished loading. This
means the callback will be run when Test::Stream is done loading all the
plugins in your use statement. If Test::Stream has already finished loading
then the callback will be run immedietly.
.ie n .IP "$bool = Test::Stream::Sync\->loaded" 4
.el .IP "\f(CW$bool\fR = Test::Stream::Sync\->loaded" 4
.IX Item "$bool = Test::Stream::Sync->loaded"
.PD 0
.IP "Test::Stream::Sync\->loaded($true)" 4
.IX Item "Test::Stream::Sync->loaded($true)"
.PD
Without arguments this will simply return the boolean value of the loaded flag.
If Test::Stream has finished loading this will be true, otherwise false. If a
true value is provided as an argument then this will set the flag to true, and
run all \f(CW\*(C`post_load\*(C'\fR callbacks. The second form should \fB\s-1ONLY\s0\fR ever be used in
Test::Stream or alternative loader modules.
.SH "MAGIC"
.IX Header "MAGIC"
This package has an \s-1END\s0 block. This \s-1END\s0 block is responsible for setting the
exit code based on the test results. This end block also calls the hooks that
can be added to this package.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
