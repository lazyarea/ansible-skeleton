.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Exporter::Meta 3"
.TH Test::Stream::Exporter::Meta 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Exporter::Meta \- Meta object for exporters.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Stream::Exporter uses this package to manage exports.
.PP
Every package that uses \f(CW\*(C`Test::Stream::Exporter\*(C'\fR has a
\&\f(CW\*(C`Test::Stream::Exporter::Meta\*(C'\fR object created for it which contains the
metadata about the available exports and the kind of export they are.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP "$meta = Test::Stream::Exporter::Meta::get( $PACKAGE )" 4
.el .IP "\f(CW$meta\fR = Test::Stream::Exporter::Meta::get( \f(CW$PACKAGE\fR )" 4
.IX Item "$meta = Test::Stream::Exporter::Meta::get( $PACKAGE )"
Returns a \f(CW\*(C`metaobject\*(C'\fR for \f(CW$PACKAGE\fR if one exists. Returns \f(CW\*(C`undef\*(C'\fR if one
does not exist. This can be used as either a method or a function, the last
argument is the only one that is used.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$meta = Test::Stream::Exporter::Meta\->new( $PACKAGE )" 4
.el .IP "\f(CW$meta\fR = Test::Stream::Exporter::Meta\->new( \f(CW$PACKAGE\fR )" 4
.IX Item "$meta = Test::Stream::Exporter::Meta->new( $PACKAGE )"
Constructs a \f(CW\*(C`metaobject\*(C'\fR for \f(CW$PACKAGE\fR and returns it. If one already
exists, it is returned.
.ie n .IP "$meta\->add( $DEFAULT, $SUBNAME )" 4
.el .IP "\f(CW$meta\fR\->add( \f(CW$DEFAULT\fR, \f(CW$SUBNAME\fR )" 4
.IX Item "$meta->add( $DEFAULT, $SUBNAME )"
.PD 0
.ie n .IP "$meta\->add( $DEFAULT, $SUBNAME => $SUBREF )" 4
.el .IP "\f(CW$meta\fR\->add( \f(CW$DEFAULT\fR, \f(CW$SUBNAME\fR => \f(CW$SUBREF\fR )" 4
.IX Item "$meta->add( $DEFAULT, $SUBNAME => $SUBREF )"
.PD
Add an export named \f(CW$SUBNAME\fR. If a ref is provided it will be used,
otherwise it will grab the sub from the package using \f(CW$SUBNAME\fR. The fist
argument is a toggle, true means the sub is exported by default, false means it
is not exported by default.
.ie n .IP "$meta\->add_bulk( $DEFAULT, $SUBNAME, $SUBNAME, ... )" 4
.el .IP "\f(CW$meta\fR\->add_bulk( \f(CW$DEFAULT\fR, \f(CW$SUBNAME\fR, \f(CW$SUBNAME\fR, ... )" 4
.IX Item "$meta->add_bulk( $DEFAULT, $SUBNAME, $SUBNAME, ... )"
Add all the subnames given as arguments to the list of exports. The subs of the
given names are taken as the references. The first argument is a toggle, true
means the susb should be exported by default, false means they should not be.
.ie n .IP "$default_ref = $meta\->\fIdefault()\fR" 4
.el .IP "\f(CW$default_ref\fR = \f(CW$meta\fR\->\fIdefault()\fR" 4
.IX Item "$default_ref = $meta->default()"
Get the arrayref of default exports. This is not a copy of the arrayref,
modifying this would modify the internal list of defaults.
.ie n .IP "$exports_ref = $meta\->\fIexports()\fR" 4
.el .IP "\f(CW$exports_ref\fR = \f(CW$meta\fR\->\fIexports()\fR" 4
.IX Item "$exports_ref = $meta->exports()"
Returns a \f(CW\*(C`HASHREF\*(C'\fR of \f(CW\*(C`$SUBNAME => $CODEREF\*(C'\fR values of all avialable
exports.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.IP "Kent Fredric <kentnl@cpan.org>" 4
.IX Item "Kent Fredric <kentnl@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
