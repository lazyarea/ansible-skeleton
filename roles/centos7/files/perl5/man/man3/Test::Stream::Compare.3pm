.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Compare 3"
.TH Test::Stream::Compare 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Compare \- Tools for comparing data structures.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This library is the driving force behind \f(CW\*(C`is()\*(C'\fR. The library is the base class
for several comparison classes that allow for deep structure comparisons.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "\s-1FOR COMPARISON CLASSES\s0"
.IX Subsection "FOR COMPARISON CLASSES"
.Vb 3
\&    package Test::Stream::Compare::MyCheck;
\&    use strict;
\&    use warnings;
\&
\&    use Test::Stream::Compare;
\&    use Test::Stream::HashBase(
\&        base => \*(AqTest::Stream::Compare\*(Aq,
\&        accessors => [qw/stuff/],
\&    );
\&
\&    sub name { \*(AqSTUFF\*(Aq }
\&
\&    sub operator {
\&        my $self = shift;
\&        my ($got) = @_;
\&        return \*(Aqeq\*(Aq;
\&    }
\&
\&    sub verify {
\&        my $self = shift;
\&        my $params = @_;
\&
\&        # Always check if $got even exists, this will be false if no value at
\&        # all was recieved. (as opposed to a $got of \*(Aqundef\*(Aq or \*(Aq0\*(Aq which are
\&        # valid meaning this field will be true).
\&        return 0 unless $params{exists};
\&
\&        my $got = $params{got};
\&
\&        return $got eq $self\->stuff;
\&    }
.Ve
.SS "\s-1FOR PLUGINS\s0"
.IX Subsection "FOR PLUGINS"
.Vb 1
\&    package Test::Stream::Plugin::MyCheck;
\&
\&    use Test::Stream::Compare::MyCheck;
\&
\&    use Test::Stream::Compare qw/compare get_build push_build pop_build build/;
\&
\&    sub MyCheck {
\&        my ($got, $exp, $name, @diag) = @_;
\&        my $ctx = context();
\&
\&        my $delta = compare($got, $exp, \e&convert);
\&
\&        if ($delta) {
\&            $ctx\->ok(0, $name, [$delta\->table, @diag]);
\&        }
\&        else {
\&            $ctx\->ok(1, $name);
\&        }
\&
\&        $ctx\->release;
\&        return !$delta;
\&    }
\&
\&    sub convert {
\&        my $thing = shift;
\&        return $thing if blessed($thing) && $thing\->isa(\*(AqTest::Stream::Compare::MyCheck\*(Aq);
\&
\&        return Test::Stream::Compare::MyCheck\->new(stuff => $thing);
\&    }
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .IP "$delta = compare($got, $expect, \e&convert)" 4
.el .IP "\f(CW$delta\fR = compare($got, \f(CW$expect\fR, \e&convert)" 4
.IX Item "$delta = compare($got, $expect, &convert)"
This will compare the structures in \f(CW$got\fR with those in \f(CW$expect\fR, The
convert sub should convert vanilla structures inside \f(CW$expect\fR into checks.
If there are differences in the structures they will be reported back as an
Test::Stream::Delta tree.
.ie n .IP "$build = \fIget_build()\fR" 4
.el .IP "\f(CW$build\fR = \fIget_build()\fR" 4
.IX Item "$build = get_build()"
Get the current global build, if any.
.IP "push_build($build)" 4
.IX Item "push_build($build)"
Set the current global build.
.ie n .IP "$build = pop_build($build)" 4
.el .IP "\f(CW$build\fR = pop_build($build)" 4
.IX Item "$build = pop_build($build)"
Unset the current global build. This will throw an exception if the build
passed in is different from the current global.
.IP "build($class, sub { ... })" 4
.IX Item "build($class, sub { ... })"
Run the provided codeblock with a new instance of \f(CW$class\fR as the current
build. Returns the new build.
.SH "METHODS"
.IX Header "METHODS"
Some of these must be overriden, others can be.
.ie n .IP "$dclass = $check\->delta_class" 4
.el .IP "\f(CW$dclass\fR = \f(CW$check\fR\->delta_class" 4
.IX Item "$dclass = $check->delta_class"
Returns the delta subclass that should be used. By default
Test::Stream::Delta is used.
.ie n .IP "@deltas = $check\->deltas(id => $id, exists => $bool, got => $got, convert => \e&convert, seen => \e%seen)" 4
.el .IP "\f(CW@deltas\fR = \f(CW$check\fR\->deltas(id => \f(CW$id\fR, exists => \f(CW$bool\fR, got => \f(CW$got\fR, convert => \e&convert, seen => \e%seen)" 4
.IX Item "@deltas = $check->deltas(id => $id, exists => $bool, got => $got, convert => &convert, seen => %seen)"
Should return child deltas.
.ie n .IP "@lines = $check\->got_lines($got)" 4
.el .IP "\f(CW@lines\fR = \f(CW$check\fR\->got_lines($got)" 4
.IX Item "@lines = $check->got_lines($got)"
This is your chance to provide line numbers for errors in the \f(CW$got\fR
structure.
.ie n .IP "$op = $check\->\fIoperator()\fR" 4
.el .IP "\f(CW$op\fR = \f(CW$check\fR\->\fIoperator()\fR" 4
.IX Item "$op = $check->operator()"
.PD 0
.ie n .IP "$op = $check\->operator($got)" 4
.el .IP "\f(CW$op\fR = \f(CW$check\fR\->operator($got)" 4
.IX Item "$op = $check->operator($got)"
.PD
Returns the operator that was used to compare the check with the recieved data
in \f(CW$got\fR. If there was no value for got then there will be no arguments,
undef will only be an argument if undef was seen in \f(CW$got\fR, this is how you
can tell the difference between a missing value and an undefined one.
.ie n .IP "$bool = $check\->verify(id => $id, exists => $bool, got => $got, convert => \e&convert, seen => \e%seen)" 4
.el .IP "\f(CW$bool\fR = \f(CW$check\fR\->verify(id => \f(CW$id\fR, exists => \f(CW$bool\fR, got => \f(CW$got\fR, convert => \e&convert, seen => \e%seen)" 4
.IX Item "$bool = $check->verify(id => $id, exists => $bool, got => $got, convert => &convert, seen => %seen)"
Return true if there is a shallow match, that is both items are arrayrefs, both
items are the same string or same number, etc. This should not look deep, deep
checks are done in \f(CW\*(C`$check\->deltas()\*(C'\fR.
.ie n .IP "$name = $check\->name" 4
.el .IP "\f(CW$name\fR = \f(CW$check\fR\->name" 4
.IX Item "$name = $check->name"
Get the name of the check.
.ie n .IP "$display = $check\->render" 4
.el .IP "\f(CW$display\fR = \f(CW$check\fR\->render" 4
.IX Item "$display = $check->render"
What should be displayed in a table for this check, usually the name or value.
.ie n .IP "$delta = $check\->run(id => $id, exists => $bool, got => $got, convert => \e&convert, seen => \e%seen)" 4
.el .IP "\f(CW$delta\fR = \f(CW$check\fR\->run(id => \f(CW$id\fR, exists => \f(CW$bool\fR, got => \f(CW$got\fR, convert => \e&convert, seen => \e%seen)" 4
.IX Item "$delta = $check->run(id => $id, exists => $bool, got => $got, convert => &convert, seen => %seen)"
This is where the checking is done, first a shallow check using
\&\f(CW\*(C`$check\->verify\*(C'\fR, then checking \f(CW\*(C`$check\->deltas()\*(C'\fR. \f(CW\*(C`\e%seen\*(C'\fR is used
to prevent cycles.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
