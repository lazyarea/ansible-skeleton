.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Bundle::V1 3"
.TH Test::Stream::Bundle::V1 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Bundle::V1 \- Suggested bundle, most important tools.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the recommended bundle for users of Test::Stream.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBNote:\fR On ly the most critical functions are listed here. Please see
individual plugins for their functions.
.PP
.Vb 1
\&    use Test::Stream \*(Aq\-V1\*(Aq;
\&
\&    ok(1, "This is a pass");
\&    ok(0, "This is a fail");
\&
\&    is("x", "x", "These strings are the same");
\&    is($A, $B, "These 2 structures match exactly");
\&
\&    like(\*(Aqx\*(Aq, qr/x/, "This string matches this pattern");
\&    like($A, $B, "These structures match where it counts");
\&
\&    done_testing;
.Ve
.SH "INCLUDED TOOLS"
.IX Header "INCLUDED TOOLS"
.IP "strict" 4
.IX Item "strict"
\&'strict' is turned on for you.
.IP "warnings" 4
.IX Item "warnings"
\&'warnings' are turned on for you.
.IP "Compare" 4
.IX Item "Compare"
This provides \f(CW\*(C`is()\*(C'\fR and \f(CW\*(C`like()\*(C'\fR. This can also provide other tools to make
deep comparisons easier, but they are not imported by default.
.Sp
See Test::Stream::Plugin::Compare for more details.
.IP "Context" 4
.IX Item "Context"
This provides the \f(CW\*(C`context()\*(C'\fR function which is useful in writing new tools,
or wrapping existing ones.
.Sp
See Test::Stream::Plugin::Context for more details.
.IP "Core" 4
.IX Item "Core"
This provides essential tools such as \f(CW\*(C`ok()\*(C'\fR, \f(CW\*(C`done_testing()\*(C'\fR, as well as
others.
.Sp
See Test::Stream::Plugin::Core for more details.
.IP "Exception" 4
.IX Item "Exception"
This provides tools to help you intercept or check for the absence of
exceptions. This is very similar to Test::Fatal, in fact Test::Fatal is
probably better. If you can, use Test::Fatal, if you cannot then this may
suffice. The functions exported do not conflict with the ones exported by
Test::Fatal so both can be loaded together.
.Sp
See Test::Stream::Plugin::Exception for more details.
.IP "ExitSummary" 4
.IX Item "ExitSummary"
This provides extra diagnostics at the end of failing tests.
.Sp
See Test::Stream::Plugin::ExitSummary for more details.
.IP "\s-1IPC\s0" 4
.IX Item "IPC"
This loads \s-1IPC\s0 support so that threading and forking just work.
.Sp
See Test::Stream::Plugin::IPC for more details.
.IP "Mock" 4
.IX Item "Mock"
This provides the \f(CW\*(C`mock()\*(C'\fR and \f(CW\*(C`mocked()\*(C'\fR functions which can be used to do
nearly any kind of mocking you might need.
.Sp
See Test::Stream::Plugin::Mock for more details.
.IP "\s-1TAP\s0" 4
.IX Item "TAP"
This sets \s-1TAP\s0 to be the default output format.
.Sp
See Test::Stream::Plugin::TAP for more details.
.IP "\s-1UTF8\s0" 4
.IX Item "UTF8"
This module turns on the utf8 pragma for your test file, it also sets \s-1STDERR,
STDOUT\s0 and the formatter output handles to use utf8.
.Sp
See Test::Stream::Plugin::UTF8 for more details.
.IP "Warnings" 4
.IX Item "Warnings"
This plugin provides tools to help intercept warnings.
.Sp
See Test::Stream::Plugin::Warnings for more details.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
