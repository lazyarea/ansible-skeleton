.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Workflow::Runner 3"
.TH Test::Stream::Workflow::Runner 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Workflow::Runner \- Simple runner for workflows.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a basic class for running workflows. This class is intended to be
subclasses for more fancy/feature rich workflows.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "\s-1SUBCLASS\s0"
.IX Subsection "SUBCLASS"
.Vb 3
\&    package My::Runner;
\&    use strict;
\&    use warnings;
\&
\&    use parent \*(AqTest::Stream::Workflow::Runner\*(Aq;
\&
\&    sub instance {
\&        my $class = shift;
\&        return $class\->new(@_);
\&    }
\&
\&    sub subtest {
\&        my $self = shift;
\&        my ($unit) = @_;
\&        ...
\&        return $bool
\&    }
\&
\&    sub verify_meta {
\&        my $self = shift;
\&        my ($unit) = @_;
\&        my $meta = $unit\->meta || return;
\&        warn "the \*(Aqfoo\*(Aq meta attribute is not supported" if $meta\->{foo};
\&        ...
\&    }
\&
\&    sub run_task {
\&        my $self = shift;
\&        my ($task) = @_;
\&        ...
\&        $task\->run();
\&        ...
\&    }
.Ve
.SS "\s-1USE SUBCLASS\s0"
.IX Subsection "USE SUBCLASS"
.Vb 1
\&    use Test::Stream qw/\-V1 Spec/;
\&
\&    use My::Runner; # Sets the runner for the Spec plugin.
\&
\&    ...
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CLASS METHODS\s0"
.IX Subsection "CLASS METHODS"
.ie n .IP "$class\->\fIimport()\fR" 4
.el .IP "\f(CW$class\fR\->\fIimport()\fR" 4
.IX Item "$class->import()"
.PD 0
.ie n .IP "$class\->import(@instance_args)" 4
.el .IP "\f(CW$class\fR\->import(@instance_args)" 4
.IX Item "$class->import(@instance_args)"
.PD
The import method checks the calling class to see if it has an
Test::Stream::Workflow::Meta instance, if it does then it sets the runner.
The runner that is set is the result of calling
\&\f(CW\*(C`$class\->instance(@instance_args)\*(C'\fR. The instance_args are optional.
.Sp
If there is no meta instance for the calling class then import is a no-op.
.ie n .IP "$bool = $class\->subtests($unit)" 4
.el .IP "\f(CW$bool\fR = \f(CW$class\fR\->subtests($unit)" 4
.IX Item "$bool = $class->subtests($unit)"
This determines if the units should be run as subtest or flat. The base class
always returns true for this. This is a hook that allows you to override the
default behavior.
.ie n .IP "$runner = $class\->\fIinstance()\fR" 4
.el .IP "\f(CW$runner\fR = \f(CW$class\fR\->\fIinstance()\fR" 4
.IX Item "$runner = $class->instance()"
.PD 0
.ie n .IP "$runner = $class\->instance(@args)" 4
.el .IP "\f(CW$runner\fR = \f(CW$class\fR\->instance(@args)" 4
.IX Item "$runner = $class->instance(@args)"
.PD
This is a hook allowing you to construct an instance of your runner. The base
class simply returns the class name as it does not need to be instansiated. If
your runner needs to maintain state then this can return a blessed instance.
.SS "\s-1CLASS AND/OR OBJECT METHODS\s0"
.IX Subsection "CLASS AND/OR OBJECT METHODS"
These are made to work on the class itself, but should also work just fine on a
blessed instance if your subclass needs to be instantiated.
.ie n .IP "$runner\->verify_meta($unit)" 4
.el .IP "\f(CW$runner\fR\->verify_meta($unit)" 4
.IX Item "$runner->verify_meta($unit)"
This method reads the \f(CW\*(C`$unit\->meta\*(C'\fR hash and warns about any unrecognised
keys. Your subclass should override this if it wants to add support for any
meta-keys.
.ie n .IP "$runner\->run(unit => $unit, args => $arg)" 4
.el .IP "\f(CW$runner\fR\->run(unit => \f(CW$unit\fR, args => \f(CW$arg\fR)" 4
.IX Item "$runner->run(unit => $unit, args => $arg)"
.PD 0
.ie n .IP "$runner\->run(unit => $unit, args => $arg, no_final => $bool)" 4
.el .IP "\f(CW$runner\fR\->run(unit => \f(CW$unit\fR, args => \f(CW$arg\fR, no_final => \f(CW$bool\fR)" 4
.IX Item "$runner->run(unit => $unit, args => $arg, no_final => $bool)"
.PD
Tell the runner to run a unit with the specified args. The args are optional.
The \f(CW\*(C`no_final\*(C'\fR arg is optional, it should be used on support units that should
not produce final results (or be a subtest of their own).
.ie n .IP "$runner\->run_task($task)" 4
.el .IP "\f(CW$runner\fR\->run_task($task)" 4
.IX Item "$runner->run_task($task)"
This simply calls \f(CW\*(C`$task\->run()\*(C'\fR. It is mainly here for subclasses to
override.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
