.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Stream::Workflow::Task 3"
.TH Test::Stream::Workflow::Task 3 "2015-10-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Stream::Workflow::Task \- Compiled form of a unit.
.SH "EXPERIMENTAL CODE WARNING"
.IX Header "EXPERIMENTAL CODE WARNING"
\&\fBThis is an experimental release!\fR Test-Stream, and all its components are
still in an experimental phase. This dist has been released to cpan in order to
allow testers and early adopters the chance to write experimental new tools
with it, or to add experimental support for it into old tools.
.PP
\&\fB\s-1PLEASE DO NOT COMPLETELY CONVERT OLD TOOLS YET\s0\fR. This experimental release is
very likely to see a lot of code churn. \s-1API\s0's may break at any time.
Test-Stream should \s-1NOT\s0 be depended on by any toolchain level tools until the
experimental phase is over.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is a temporary object created by a runner to process
Test::Stream::Workflow::Unit objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
You rarely encounter a task object, they are mainyl used under the hood. When
you do get one you usually just want to call \f(CW\*(C`iterate()\*(C'\fR on it. This can be
done by treating it as a coderef.
.PP
.Vb 1
\&    $task\->();
.Ve
.PP
Or direcectly:
.PP
.Vb 1
\&    $task\->iterate();
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$task\->\fIrun()\fR" 4
.el .IP "\f(CW$task\fR\->\fIrun()\fR" 4
.IX Item "$task->run()"
Run the task, this should only every be done by a runner.
.ie n .IP "$task\->\fIiterate()\fR" 4
.el .IP "\f(CW$task\fR\->\fIiterate()\fR" 4
.IX Item "$task->iterate()"
Sometimes tasks are recursive. This method is how they resume running in a
recursive structure.
.ie n .IP "$task\->\fIreset()\fR" 4
.el .IP "\f(CW$task\fR\->\fIreset()\fR" 4
.IX Item "$task->reset()"
Reset the task. This is rarely needed.
.ie n .IP "$ar = $task\->\fIargs()\fR" 4
.el .IP "\f(CW$ar\fR = \f(CW$task\fR\->\fIargs()\fR" 4
.IX Item "$ar = $task->args()"
Get the args that will be passed to the primary actions.
.ie n .IP "$bool = $task\->\fIfinished()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$task\fR\->\fIfinished()\fR" 4
.IX Item "$bool = $task->finished()"
Check if the task has finished running.
.ie n .IP "$bool = $task\->\fIno_final()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$task\fR\->\fIno_final()\fR" 4
.IX Item "$bool = $task->no_final()"
True if the task is not required to generate events.
.ie n .IP "$bool = $task\->\fIshould_run()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$task\fR\->\fIshould_run()\fR" 4
.IX Item "$bool = $task->should_run()"
True if there is still work to be done.
.ie n .IP "$bool = $task\->\fIsubtest()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$task\fR\->\fIsubtest()\fR" 4
.IX Item "$bool = $task->subtest()"
True if the task should produce a subtest.
.ie n .IP "$int = $task\->\fIevents()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$task\fR\->\fIevents()\fR" 4
.IX Item "$int = $task->events()"
Number of events produced by the primary actions.
.ie n .IP "$int = $task\->\fIfailed()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$task\fR\->\fIfailed()\fR" 4
.IX Item "$int = $task->failed()"
Number of failures produced inside the primary actions.
.ie n .IP "$int = $task\->\fIpending()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$task\fR\->\fIpending()\fR" 4
.IX Item "$int = $task->pending()"
How many pending iterations remain.
.ie n .IP "$int = $task\->\fIstage()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$task\fR\->\fIstage()\fR" 4
.IX Item "$int = $task->stage()"
What stage the task is in.
.ie n .IP "$msg = $task\->\fIexception()\fR" 4
.el .IP "\f(CW$msg\fR = \f(CW$task\fR\->\fIexception()\fR" 4
.IX Item "$msg = $task->exception()"
If an exception has occured the message will be stored here.
.ie n .IP "$unit = $task\->\fIunit()\fR" 4
.el .IP "\f(CW$unit\fR = \f(CW$task\fR\->\fIunit()\fR" 4
.IX Item "$unit = $task->unit()"
Get the unit the task wraps.
.ie n .IP "$runner = $task\->\fIrunner()\fR" 4
.el .IP "\f(CW$runner\fR = \f(CW$task\fR\->\fIrunner()\fR" 4
.IX Item "$runner = $task->runner()"
Get the runner instance and/or class.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test::Stream can be found at
\&\fIhttp://github.com/Test\-More/Test\-Stream/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
